---
layout: documentation
title: Introduction
sort_info: 0
directory_title: The Workspace
directory_sort_info: 0
---

# Managing a Rock installation

A system can base itself on different "flavors" of Rock. One can basically
choose one out of three:

- **the latest release** version of the Rock Core software. Once released, it
  will not change, but may see subsequent point releases that would only differ
  by (important) bugfixes. The only way a release-based install will get modifications
  is if the developer changes the base release.
- **the stable flavor** is the last release plus bugfixes. Unlike the releases,
  updating a 'stable' system will always land you on the latest release, and
  in-between releases will get patched with bugfixes. This **does** include being
  updated automatically to new major releases.
- **the master flavor** is the development branch, and may break.

Rock's primary platform is Ubuntu. The only guarantee made by the Rock team is
that Rock's current release and master branches work on the current Ubuntu LTS
version and often works on the latest Ubuntu version.

Rock has no option to install from binary, the only currently supported method
of install is from source.

Other linux-based platforms (Debian, Arch, â€¦) are known to work, but since they
don't see regular use, installation may not be as streamlined as on Ubuntu.
MacOS X also has seen some Rock usage, but is seldom used and therefore can
cause problems. Windows has seen some preliminary usage.

What will be covered here:

- [Rock installation on a Linux system](#install)
- [day-to-day management of a Rock installation](day_to_day.html)
- common installation problems and how to solve them

## Installation {#install}

<div class="alert alert-warning" role="alert" markdown="1">
As of today (June 2017), not all the software used in this guide has reached
Rock mainline repositories. For this reason, one needs to start using the
buildconf repository on GitHub's
[`rock-gazebo/buildconf`](https://github.com/rock-gazebo/buildconf) instead of
the default one at
[`rock-core/buildconf`](https://github.com/rock-core/buildconf). This installation guide already reflects this.
</div>

Rock's current release is <%= config[:latest_release] %>, and requires **Ruby <%= config[:min_ruby_version] %> or later**

 1. Install Ruby and verify that the version matches

    ~~~
    sudo apt-get install ruby
    ruby --version
    ~~~

 2. Create and "cd" into the directory in which you want to install the toolchain.

    ~~~
    mkdir dev
    cd dev
    ~~~

 3. Download autoproj's bootstrap script

    ~~~
    wget http://rock-robotics.org/autoproj_bootstrap
    ~~~

 4. Bootstrap your installation. This installs autoproj and checks out
    the build configuration, but does not check out packages

    - if you want to create a new workspace based on the latest release, do

      ~~~
      ruby autoproj_bootstrap \
          git https://github.com/rock-gazebo/buildconf \
          tag=<%= config[:latest_release] %>
      ~~~
      
    - if you want to use the `stable` or `master` flavors, do

      ~~~
      ruby autoproj_bootstrap \
          git https://github.com/rock-gazebo/buildconf
      ~~~

 5. Update and build the installation's default packages.

    ~~~
    aup --all -k
    amake --all -k
    ~~~

 5. Important: as the build tool tells you, you **must** load the generated env.sh script at the end of the build !!! You must also do in new terminals before you can interact with the Rock installation

**Next**: [day-to-day interaction](day_to_day.html)

