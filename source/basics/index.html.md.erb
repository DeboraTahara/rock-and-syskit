---
layout: documentation
title: Introduction
sort_info: 0
directory_title: Basics
directory_sort_info: 10
---

# Running a simple system using Gazebo and Syskit

Rock and Syskit provide a seamless integration with Gazebo. We will leverage
this integration in this section to discover how to use existing components to
build and control a minimal system. This should give you a hint about what Rock
offers at runtime as well as the basics of package and component management.

This will cover building a simple system and simulating using Gazebo. It will
only base itself on existing components (no new components will be developed).

This section assumes that you have a [bootstrapped Rock
installation](installation.html).  All examples that have to be run inside a
terminal assume that you have sourced this installation's `env.sh` file in the
current terminal.

When applicable, we will breach advanced topics, or explanations about how
things are implemented under-the-hood. These will be clearly indicated by
a box like this:

<div class="panel panel-warning" markdown="1">
<div class="panel-heading" markdown="1">

<a class="btn btn-warning" role="button" data-toggle="collapse" href="#under_the_hood" aria-expanded="false" aria-controls="under_the_hood">
  Advanced
</a><span class="advanced_description">This will hold the summary. Just click on "Advanced".</span>
</div>
<div class="collapse panel-body" markdown="1" id="under_the_hood">
The details will be here.
</div>
</div>


{: .advanced-topic}

## Basic Concepts {#concepts}

**Design and runtime** Rock is a model-based architecture. A Rock system is
described **at design time**, that is before any piece of the actual
processing code needs to be run, and can verify properties regarding the
final system then. **Runtime** then refers to the point where the actual data
processing code runs -- which involves hardware or simulation in case of
robotics.

**Libraries, Components and System** Deep-down, the bulk of the code that
makes a Rock system is organized in libraries. Libraries propose APIs -
interfaces - to solve particular problems, e.g. OpenCV to process images, PCL
to process point clouds, a GPS driver to control a GPS device and read GPS
positions, … This way to organize software development is nothing specific to
Rock or even robotics. It's the principal way software is developed _period_.

However, libraries _offer_ functionality, but do not specify how this
functionality should be integrated to offer a "runtime", i.e. how the actual
data being processed can be passed to the processing code in the libraries,
from the sensors to the actuators, to turn all that code into a robot.

The paradigm that Rock follows is the one of **components**. Components are
black boxes that have inputs and produce outputs. It's by meshing these
components together - connecting outputs to inputs - that an active
sensor-processing-actuator loop is created and that the robot can act and react
in its environment. In addition to this _dataflow interface_ (data inputs and
outputs), Rock components also offer a _configuration_ interface where parameters
can be chosen and tested. In Rock, these components are implemented in **oroGen
packages**. They are described in an orogen file, which code-generates the
skeleton of the components. oroGen packages also define the datatypes that
can be transferred between the components.

What sets Rock apart from other component-based systems is the ability to
reconfigure the component network to fit the situation as best as possible.
This is made possible by explicitly choosing at any point in time both which
components are active, and which output-input connections are present in the
network. **Syskit** is the tool that makes such a design feasible, pushing most
of the complexity of such a dynamic system into the tool, leaving the developer
make higher-level design decisions.


**Software Packages** A software package is a way to distribute code (software).
Rock's only convention is to have one library corresponding to one package or
one component to one package. Libraries should be "fat", components "slim". That is,
most of the functionality should be implemented as a component-independent
library.

## The Flow

The rest of the basics section will be following this flow:

<table class="table">
<thead>
    <tr>
    <th>What you will do</th>
    <th>What Syskit concepts are covered</th>
    </tr>
</thead>
<tbody>
    <tr>
    <td><%= link_to "Getting started", "getting_started.html" %></td>
    <td>Bootstrapping a Syskit app with Gazebo and a SDF scene, running Gazebo and visualizing the scene</td>
    </tr>
    <tr>
    <td><%= link_to "Creating an arm control network", "composition.html" %></td>
    <td>Compositions</td>
    </tr>
    <tr>
    <td><%= link_to "Holding position in the cartesian space", "constant_generator.html" %></td>
    <td>Constant Generator, Profiles</td>
    </tr>
    <tr>
    <td><%= link_to "Binding the component networks to the simulator", "devices.html" %></td>
    <td>Devices</td>
    </tr>
    <tr>
    <td><%= link_to "Running the networks", "deployment.html" %></td>
    <td>Deployment and runtime</td>
    </tr>
</tbody>
</table>

That's all for now … [let's get started by installing Rock](installation.html){:.btn .btn-primary}
